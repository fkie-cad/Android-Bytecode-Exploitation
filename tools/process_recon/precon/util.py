from ctypes import Structure
from ctypes import Union
from ctypes import Array
import logging


def TODO(message):
    logging.debug(message)


# TODO: Refactor, because this is simply wrong (still works though!)
def pretty_print(obj, base_indent=0, field_indent=2):

    # Get _fields_ entries
    d = get_dict(obj)

    # Check if obj is primitive
    if len(d) == 0:
        if isinstance(obj, int):
            return ' ' * (base_indent + field_indent) + hex(obj)
        return ' ' * (base_indent + field_indent) + obj.__str__()

    # Do magical indentation etc.
    s = ' ' * base_indent + '{\n'
    for key in d:
        value = d[key]
        if isinstance(value, int):
            value = hex(value)
        elif isinstance(value, Array):
            tmp = '[\n'
            for entry in value:
                if base_indent == 0:
                    tmp += f'{pretty_print(entry, base_indent=base_indent + field_indent * 2)}\n'
                else:
                    tmp += f'{pretty_print(entry, base_indent=base_indent * 2 + field_indent)}\n'
            tmp += ' ' * (base_indent + field_indent) + ']'
            value = tmp

        s += ' ' * (base_indent + field_indent) + f'{key}: {value}\n'
    s += ' ' * base_indent + '}'
    return s


def get_dict(obj):
    result = {}
    if not hasattr(obj, '_fields_'):
        return {}
    for field_name, field_type in obj._fields_:
        field_value = getattr(obj, field_name)
        if issubclass(field_type, Structure) or issubclass(field_type, Union):
            field_value = _get_dict(field_value)
        result[field_name] = field_value
    return result