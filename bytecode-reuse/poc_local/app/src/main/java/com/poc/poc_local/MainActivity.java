package com.poc.poc_local;

import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;
import android.util.Log;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.ByteBuffer;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = MainActivity.class.getSimpleName();

    // Used to load the 'stackindexoob' library on application startup.
    static {
        System.loadLibrary("WWW");
    }


    private ServerSocket server;
    private Socket client;
    private DataOutputStream out;
    private DataInputStream in;

    private void initServer() throws IOException {
        this.server = new ServerSocket();
        this.server.bind(new InetSocketAddress("127.0.0.1", 8080));
        server.setSoTimeout(0);
    }

    private void setupConnection() throws IOException {
        this.client = this.server.accept();
        Log.d(TAG, "Client connected: " + client.getInetAddress());
        this.out = new DataOutputStream(client.getOutputStream());
        this.in = new DataInputStream(client.getInputStream());
    }

    private boolean readBool() throws IOException {
        return this.in.readInt() != 0;
    }

    private int readInt() throws IOException {
        return this.in.readInt();
    }

    private long readLong() throws IOException {
        return this.in.readLong();
    }

    private void writeLong(long value) throws IOException {
        this.out.writeLong(value);
    }

    private void close() {
        try {
            if (this.in != null) {
                this.in.close();
                this.in = null;
            }
            if (this.out != null) {
                this.out.close();
                this.out = null;
            }
            if (this.client != null) {
                this.client.close();
                this.client = null;
            }
            if (this.server != null) {
                this.server.close();
                this.server = null;
            }
            System.gc();
        } catch (final IOException e) {
            e.printStackTrace();
        }
    }

    private boolean stayAlive = true;
    private void run() {
        while (true) {
            try {
                Log.d(TAG, "Initializing server....");
                this.initServer();

                Log.d(TAG, "Setting up connection....");
                this.setupConnection();

                // Loop until user wants to exit
                while (this.readBool()) {
                    // Receive index and value for stack oob
                    MainActivity.www(this.readLong(), this.readLong());
                }
            } catch (final IOException e) {
                e.printStackTrace();
            } finally {
                this.close();
            }
            if (!stayAlive) {
                break;
            }
            Log.d(TAG, "Restarting server socket....");
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);


        new Thread(this::run).start();
    }

    public static native void www(long address, long value);
}