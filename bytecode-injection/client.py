from pwn import *
context.log_level = 'error'

TIMEOUT = 5

class PwnClient:

    def __init__(self, host : str, port : int):
        self.io = remote(host, port)

    def close(self) -> None:
        self.io.close()

    def send(self, message: bytes) -> None:
        self.io.send(message)

    def send_int(self, value: int) -> None:
        self.send(p32(value, endian='big', signed=True))

    def send_long(self, value: int) -> None:
        self.send(p64(value, endian='big'))

    def receive(self, length: int = None) -> bytes:
        if not length:
            return self.io.recv(timeout=TIMEOUT)
        assert (length >= 0)
        buffer = b''
        while len(buffer) < length:
            received = self.io.recv(length - len(buffer), timeout=TIMEOUT)
            if (received and len(received) > 0):
                buffer += received
        return buffer


    def receive_int(self) -> int:
        return u32(self.receive(4), endian='big')
    
    def receive_long(self) -> int:
        return u64(self.receive(8), endian='big')